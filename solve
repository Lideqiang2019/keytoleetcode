class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        '''
        从四条边上的O出发，用DFS把所有相邻的的O染成P。此时没有被染色的点就是被围绕的区域。 再扫描一次，把所有的P变成         O，把所有的O变成X即可。
        '''
        if not board or not board[0]:
            return board
        m, n = len(board), len(board[0])

        dx = [1, -1, 0, 0]
        dy = [0, 0, 1, -1]
        
        def dfs(x, y):
            for k in range(4):
                xx = x + dx[k]
                yy = y + dy[k]
 
                if 0 <= xx < m and 0 <= y < n: #当前坐标有效
                    if board[xx][yy] == "O":
                        board[xx][yy] = "P" #给走过的点染色
                        dfs(xx, yy)
        #--------以下在从四周往里找相邻的所有点
        i = 0
        for j in range(n): #上边
            if board[i][j] == "O":
                board[i][j] = "P"
                dfs(i, j)
 
        i = m - 1
        for j in range(n): #下边
            if board[i][j] == "O":
                board[i][j] = "P"
                dfs(i, j)    
        j = 0        
        for i in range(m): #左边
            if board[i][j] == "O":
                board[i][j] = "P"
                dfs(i, j) 
 
        j = n - 1     
        for i in range(m): #右边
            if board[i][j] == "O":
                board[i][j] = "P"
                dfs(i, j) 
        #--------以上在从四周往里找相邻的所有点
        # print board
        res = 0
        for i in range(m):
            for j in range(n):
                if board[i][j] == "P": #染色回来
                    board[i][j] = "O"
                elif board[i][j] == "O":
                    board[i][j] = "X"
                        
        return board
