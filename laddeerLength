class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        from collections import deque
        wordList = set(wordList)  # set中找一个单词的时间复杂度是O(log(n)),比list快
        queue = deque([(beginWord, 1)])
        while queue:
            cur, depth = queue.popleft()
            if cur == endWord:
                return depth
            for i in range(len(cur)):
                for j in [chr(ord('a') + x) for x in range(0, 26)]:
                    word = cur[:i] + j + cur[i + 1:]  # 对cur的每个字母分别替换成26个字母看是否在wordList里面
                    if word in wordList:
                        wordList.remove(word)
                        queue.append((word, depth + 1))
        return 0
